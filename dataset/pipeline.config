# CenterNet meta-architecture from the "Objects as Points" [2] paper with the
# hourglass[1] backbone. This config achieves an mAP of 41.92 +/- 0.16 on
# COCO 17 (averaged over 5 runs). This config is TPU compatible.
# [1]: https://arxiv.org/abs/1603.06937
# [2]: https://arxiv.org/abs/1904.07850

model {
  center_net {
    num_classes: 1 # total number of class
    feature_extractor {
      type: "hourglass_104"
      bgr_ordering: true
      channel_means: [104.01362025, 114.03422265, 119.9165958 ]
      channel_stds: [73.6027665 , 69.89082075, 70.9150767 ]
    }
    image_resizer {
      keep_aspect_ratio_resizer {
        min_dimension: 512
        max_dimension: 512
        pad_to_max_dimension: true
      }
    }
    object_detection_task {
      task_loss_weight: 1.0
      offset_loss_weight: 1.0
      scale_loss_weight: 0.1
      localization_loss {
        l1_localization_loss {
        }
      }
    }
    object_center_params {
      object_center_loss_weight: 1.0
      min_box_overlap_iou: 0.7
      max_box_predictions: 100
      classification_loss {
        penalty_reduced_logistic_focal_loss {
          alpha: 2.0
          beta: 4.0
        }
      }
    }

    keypoint_label_map_path: "dataset/label_map.pbtxt" #path to label_map.pbtxt
    keypoint_estimation_task {
      task_name: "plier_keypoint_detection" #task_name of choice
      task_loss_weight: 1.0
      loss {
        localization_loss {
          l1_localization_loss {
          }
        }
        classification_loss {
          penalty_reduced_logistic_focal_loss {
            alpha: 2.0
            beta: 4.0
          }
        }
      }
      keypoint_class_name: "Corner" # Class name of  Catergory 1, match with label_map
      keypoint_regression_loss_weight: 0.1
      keypoint_heatmap_loss_weight: 1.0
      keypoint_offset_loss_weight: 1.0
      offset_peak_radius: 3
      per_keypoint_offset: true
    }
  }
}

train_config: {

  batch_size: 8
  num_steps: 20000

  data_augmentation_options {
    random_horizontal_flip {
      keypoint_flip_permutation: 0
      keypoint_flip_permutation: 2
      keypoint_flip_permutation: 1
      keypoint_flip_permutation: 4
      keypoint_flip_permutation: 3
    }
  }

  data_augmentation_options {
    random_crop_image {
      min_aspect_ratio: 0.5
      max_aspect_ratio: 1.7
      random_coef: 0.25
    }
  }


  data_augmentation_options {
    random_adjust_hue {
    }
  }

  data_augmentation_options {
    random_adjust_contrast {
    }
  }

  data_augmentation_options {
    random_adjust_saturation {
    }
  }

  data_augmentation_options {
    random_adjust_brightness {
    }
  }

  data_augmentation_options {
    random_absolute_pad_image {
       max_height_padding: 200
       max_width_padding: 200
       pad_color: [0, 0, 0]
    }
  }

  optimizer {
    adam_optimizer: {
      epsilon: 1e-7  # Match tf.keras.optimizers.Adam's default.
      learning_rate: {
        cosine_decay_learning_rate {
          learning_rate_base: 1e-3
          total_steps: 20000
          warmup_learning_rate: 2.5e-4
          warmup_steps: 3000
        }
      }
    }
    use_moving_average: false
  }
  max_number_of_boxes: 100
  unpad_groundtruth_tensors: false

  fine_tune_checkpoint_version: V2
  fine_tune_checkpoint: "pretrained_model/centernet_hg104_512x512_kpts_coco17_tpu-32/checkpoint/ckpt-0" # path to pretrained_model checkpoint
  fine_tune_checkpoint_type: "detection"
}

train_input_reader: {
  label_map_path: "dataset/label_map.pbtxt"
  tf_record_input_reader {
    input_path: "dataset/tfrecord/coco_train.record-00000-of-00001"
  }
  num_keypoints: 4
}

eval_config: {
  metrics_set: "coco_detection_metrics"
  use_moving_averages: false
  num_visualizations: 10
  max_num_boxes_to_visualize: 20
  min_score_threshold: 0.2
  batch_size: 1;
  parameterized_metric {
    coco_keypoint_metrics {
      class_label: "Corner"
      keypoint_label_to_sigmas {
        key: "top_left"
        value: 5
      }
      keypoint_label_to_sigmas {
        key: "top_right"
        value: 5
      }
      keypoint_label_to_sigmas {
        key: "bottom_right"
        value: 5
      }
      keypoint_label_to_sigmas {
        key: "bottom_left"
        value: 5
      }
  }
  }
  # Provide the edges to connect the keypoints. The setting is suitable for
  # our dataset has 5 keypoints
  keypoint_edge {  # top_left - top_right
    start: 0
    end: 1
  }
  keypoint_edge {  # top_right - bottom_right
    start: 1
    end: 2
  }
  keypoint_edge {  # bottom_right - bottom_left
    start: 2
    end: 3
  }
  keypoint_edge {  # bottom_left - top_left
    start: 3
    end: 0
  }
}

eval_input_reader: {
  label_map_path: "dataset/label_map.pbtxt" # path to label_map.pbtxt
  tf_record_input_reader {
    input_path: "dataset/tfrecord/coco_testdev.record-00000-of-00001" # path to val tfrecord
  }
  num_keypoints: 4
}

